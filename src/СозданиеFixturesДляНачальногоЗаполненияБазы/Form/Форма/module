
Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьМассивКонстантДляОбработки()
	Массив = Новый Массив;
	
	Для каждого Элем Из Метаданные.Константы Цикл
		//Сообщить(Элем);
		Имя         = Элем.Имя;
		Массив.Добавить(Имя);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

Функция ПолучитьСтрокуДляСтруктуры(Структура,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения = Новый Структура;");
	
	Для каждого Элем Из Структура Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(ОбъектДляХранилищаЗначения);");
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСоответствия(Соответствие,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения = Новый Соответствие;");
	
	Для каждого Элем Из Соответствие Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		СтрокаКлюч     = ПолучитьСтрокуДляЗначения(Ключ,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Вставить(" + СтрокаКлюч + "," + СтрокаЗначения + ");");
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(ОбъектДляХранилищаЗначения);");
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСпискаЗначений(Спс,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения = Новый СписокЗначений;");
	
	//Спс = Новый СписокЗначений;
	//Спс.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000001728"),"Товар");
	Для каждого Элем Из Спс Цикл
		Значение      = Элем.Значение;
		Представление = Элем.Представление;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Добавить(Неопределено,""" + Представление + """);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		Если ЗначениеЗаполнено(Представление) Тогда
			ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Добавить(" + СтрокаЗначения + ",""" + Представление + """);");
		Иначе	
			ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Добавить(" + СтрокаЗначения + ");");
		КонецЕсли;	 
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(ОбъектДляХранилищаЗначения);");
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляТаблицыЗначений(Тзн,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения = Новый ТаблицаЗначений;");
	
	//Спс = Новый СписокЗначений;
	//Спс.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000001728"),"Товар");
	
	Для каждого Колонка Из Тзн.Колонки Цикл
		ДобавитьСтрокуКода(ТаблицаКода,"ОбъектДляХранилищаЗначения.Колонки.Добавить(""" + Колонка.Имя + """);");
	КонецЦикла;
	
	Ном = 0;
	Для каждого СтрокаТаблицы Из Тзн Цикл
		Ном = Ном + 1;
		ДобавитьСтрокуКода(ТаблицаКода,"//Строка №" + Ном);
		ДобавитьСтрокуКода(ТаблицаКода,"СтрокаТаблицы = ОбъектДляХранилищаЗначения.Добавить();");
		Для каждого Колонка Из Тзн.Колонки Цикл
			ЗначениеИзТаблицы = СтрокаТаблицы[Колонка.Имя];
			Если ЗначениеИзТаблицы = Неопределено Тогда
				//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
				ДобавитьСтрокуКода(ТаблицаКода,"СтрокаТаблицы." + Колонка.Имя + "=" + "Неопределено" + ";");
				Продолжить;
			КонецЕсли;	 
			
			СтрокаЗначения = ПолучитьСтрокуДляЗначения(ЗначениеИзТаблицы,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
			Если СтрокаЗначения = Неопределено Тогда
				СтрокаЗначения = "Неопределено";
			КонецЕсли;	 
			ДобавитьСтрокуКода(ТаблицаКода,"СтрокаТаблицы." + Колонка.Имя + "=" + СтрокаЗначения + ";");
		КонецЦикла;
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(ОбъектДляХранилищаЗначения);");
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьДатуСтрокой(Дат)
	Возврат "'" + Формат(Дат,"ДФ=yyyyMMdd") + Формат(Дат,"ДФ=HHmmss") + "'";
КонецФункции	

Процедура ДобавитьОбъектВТаблицу(ТаблицаОбъектов,Объект,Тип,Вид)
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрТаблицаОбъектов        = ТаблицаОбъектов.Добавить();
	СтрТаблицаОбъектов.Объект = Объект;
	СтрТаблицаОбъектов.Тип    = Тип;
	СтрТаблицаОбъектов.Вид    = Вид;
КонецПроцедуры

Функция ПолучитьСтрокуДляЗначения(Значение,ИмяКонстанты = "",ТаблицаСправочников,ТаблицаКода);
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		//СтрЧислоСтрок
		//СтрПолучитьСтроку
		
		ПромСтр           = СтрЗаменить(Значение,"""","""""");
		ЧислоСтрокВСтроке = СтрЧислоСтрок(ПромСтр);
		Если ЧислоСтрокВСтроке = 1 Тогда
			Возврат """" + ПромСтр + """";
		Иначе
			СтрокаРезультат = """" + СтрПолучитьСтроку(ПромСтр,1);
			Для Ккк = 2 По ЧислоСтрокВСтроке Цикл
				СтрокаРезультат = СтрокаРезультат + Символы.ПС;
				СтрокаРезультат = СтрокаРезультат + Символы.Таб +  "|" +  СтрПолучитьСтроку(ПромСтр,Ккк);
				Если Ккк = ЧислоСтрокВСтроке Тогда
					СтрокаРезультат = СтрокаРезультат + """";
				КонецЕсли;	 
			КонецЦикла;
			
			Возврат СтрокаРезультат;
			//Сообщить("Стр = """ + СтрПолучитьСтроку(ПромСтр,1));
			//ДобавитьСтрокуКода(ТаблицаКода,"Стр = """ + СтрПолучитьСтроку(ПромСтр,1));
			//Для Ккк=2 По ЧислоСтрокВСтроке Цикл
			//	Если Ккк = ЧислоСтрокВСтроке Тогда
			//		//Сообщить("|" + СтрПолучитьСтроку(ПромСтр,Ккк) + """;");
			//		ДобавитьСтрокуКода(ТаблицаКода,"|" + СтрПолучитьСтроку(ПромСтр,Ккк) + """;");
			//	иначе	
			//		//Сообщить("|" + СтрПолучитьСтроку(ПромСтр,Ккк));
			//		ДобавитьСтрокуКода(ТаблицаКода,"|" + СтрПолучитьСтроку(ПромСтр,Ккк));
			//	КонецЕсли;	 
			//КонецЦикла;
			//Если ИмяКонстанты <> "" Тогда
			//	ДобавитьСтрокуКода(ТаблицаКода,"Константы." + ИмяКонстанты + ".Установить(" + "Стр" + ");");
			//КонецЕсли;	 
		КонецЕсли;	
		
		//Возврат "ОбработкаВнутриАлгоритма";
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат СтрЗаменить(СтрЗаменить(Значение,",","."),Символы.НПП,"");
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если Значение Тогда
			Возврат "Истина";
		Иначе	
			Возврат "Ложь";
		КонецЕсли;	 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		//Возврат "'" + Формат(Значение,"ДФ=yyyyMMdd") + Формат(Значение,"ДФ=HHmmss") + "'";
		Возврат ПолучитьДатуСтрокой(Значение);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ДлинаКода         = Значение.Метаданные().ДлинаКода;
		ДлинаНаименования = Значение.Метаданные().ДлинаНаименования;
		
		ДобавитьОбъектВТаблицу(ТаблицаСправочников,Значение,"Справочник",ИмяМетаданного);
		
		Если ДлинаКода > 0 Тогда
			Если Значение.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код""," + СтрЗаменить(СокрЛП(Значение.Код),Символы.НПП,"") + ")";
			Иначе	
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код"",""" + СокрЛП(Значение.Код) + """)";
			КонецЕсли;	 
		ИначеЕсли ДлинаНаименования > 0 Тогда
			Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Наименование"",""" + СокрЛП(Значение.Наименование) + """)";
		Иначе
			Возврат Неопределено;
			//Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		КонецЕсли;	 
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ТипНомера         = Значение.Метаданные().ТипНомера;
		ДлинаНомера       = Значение.Метаданные().ДлинаНомера;
		Если ДлинаНомера > 0 Тогда
			Если Значение.Метаданные().ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """," + СтрЗаменить(СокрЛП(Значение.Номер),Символы.НПП,"") + "," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			Иначе	
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + СокрЛП(Значение.Номер) + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			КонецЕсли;	 
		Иначе	
			Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + "" + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			//Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		КонецЕсли;	 
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяМетаданного].Индекс(Значение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		Возврат "Перечисления." + ИмяМетаданного + "." + ИмяЗначенияПеречисления;
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		ЗначениеИзХранилища = Значение.Получить();
		Если ЗначениеИзХранилища = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТипЗначенияИзХранилища = ТипЗнч(ЗначениеИзХранилища);
		Если ТипЗначенияИзХранилища = Тип("Структура") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСтруктуры(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("СписокЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСпискаЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("ТаблицаЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляТаблицыЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("Соответствие") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСоответствия(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		КонецЕсли;	 
		
		//Сообщить("ХранилищеЗначения");
		//ПолучитьСтрокуКодаДляЗначения(ЗначениеИзХранилища,Имя)
		Если ИмяКонстанты <> "" Тогда
			//Сообщить("//Здесь надо заполнить константу " + ИмяКонстанты + " в которой хранилище значения. ТипЗначенияИзХранилища="+ТипЗначенияИзХранилища);
			ДобавитьСтрокуКода(ТаблицаКода,"//Здесь надо заполнить константу " + ИмяКонстанты + " в которой хранилище значения. ТипЗначенияИзХранилища="+ТипЗначенияИзХранилища);
		КонецЕсли;	 
		Возврат Неопределено;
	Иначе
		//Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		Если ИмяКонстанты = "" Тогда //значит это подчиненное значение, которое имеет сложный тип, например в таблце значений внутри были структуры
			
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции	

Процедура ДобавитьСтрокуКода(ТаблицаКода,Стр,ДобавитьТаб = Истина)
	СтрТаблицаКода            = ТаблицаКода.Добавить();
	Если ДобавитьТаб Тогда
		СтрТаблицаКода.СтрокаКода = Символы.Таб + Стр;
	Иначе	
		СтрТаблицаКода.СтрокаКода = Стр;
	КонецЕсли;	 
КонецПроцедуры


Процедура ПолучитьСтрокуКодаДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
		ТипЗначения = ТипЗнч(Значение);
		
		
		СтрокаДляЗначения = ПолучитьСтрокуДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаДляЗначения = Неопределено Тогда
			//ДобавитьСтрокуКода(ТаблицаКода,);
			//Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
			ДобавитьСтрокуКода(ТаблицаКода,"//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
			//Сообщить("Константы." + Имя + ".Установить(" + "ОбъектДляХранилищаЗначения" + ");");
			//Сообщить(" ");
			ДобавитьСтрокуКода(ТаблицаКода,"Константы." + Имя + ".Установить(" + "ХранилищеЗначения" + ");");
			ДобавитьСтрокуКода(ТаблицаКода," ");
		ИначеЕсли СтрокаДляЗначения = "ОбработкаВнутриАлгоритма" тогда
			//значит уже всё сделано
		Иначе
			//Сообщить("Константы." + Имя + ".Установить(" + СтрокаДляЗначения + ");");
			//Сообщить(" ");
			ДобавитьСтрокуКода(ТаблицаКода,"Константы." + Имя + ".Установить(" + СтрокаДляЗначения + ");");
			ДобавитьСтрокуКода(ТаблицаКода," ");
		КонецЕсли;	 
		
		//Если ТипЗначения = Тип("Строка") Тогда
		//	Сообщить("Константы." + Имя + ".Установить(""" + Значение + """);");
		//ИначеЕсли ТипЗначения = Тип("Число") Тогда
		//	Сообщить("Константы." + Имя + ".Установить(" + СтрЗаменить(Значение,",",".") + ");");
		//ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		//	Если Значение Тогда
		//		Сообщить("Константы." + Имя + ".Установить(" + "Истина" + ");");
		//	Иначе	
		//		Сообщить("Константы." + Имя + ".Установить(" + "Ложь" + ");");
		//	КонецЕсли;	 
		//ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		//	Сообщить("Константы." + Имя + ".Установить('" + Формат(Значение,"ДФ=yyyyMMdd") + Формат(Значение,"ДФ=HHmmss") + "');");
		//ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		//	ИмяМетаданного    = Значение.Метаданные().Имя;
		//	ДлинаКода         = Значение.Метаданные().ДлинаКода;
		//	ДлинаНаименования = Значение.Метаданные().ДлинаНаименования;
		//	Если ДлинаКода > 0 Тогда
		//		Если Значение.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
		//			Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код""," + Значение.Код + "));");
		//		Иначе	
		//			Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код"",""" + Значение.Код + """));");
		//		КонецЕсли;	 
		//	ИначеЕсли ДлинаНаименования > 0 Тогда
		//		Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Наименование"",""" + Значение.Наименование + """));");
		//	Иначе
		//		Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		//	КонецЕсли;	 
		//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		//	ИмяМетаданного    = Значение.Метаданные().Имя;
		//	ИндексЗначенияПеречисления = Перечисления[ИмяМетаданного].Индекс(Значение);
		//	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		//	Сообщить("Константы." + Имя + ".Установить(Перечисления." + ИмяМетаданного + "." + ИмяЗначенияПеречисления + ");");
		//ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		//	ЗначениеИзХранилища = Значение.Получить();
		//	Если ЗначениеИзХранилища = Неопределено Тогда
		//		Сообщить("//Константа " + Имя + " была не заполнена.");
		//		Возврат;
		//	КонецЕсли;	 
		//	
		//	Сообщить("ХранилищеЗначения");
		//	ПолучитьСтрокуКодаДляЗначения(ЗначениеИзХранилища,Имя)
		//Иначе
		//	Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		//КонецЕсли;	 
КонецПроцедуры


Процедура кнГенерацияДанныхДляКонстантНажатие(Элемент)
	ФайлМакета = Новый Файл(ПутьУПустомуПравильномуМакету);
	Если Не ФайлМакета.Существует() Тогда
		Сообщить("Файл макета " + ПутьУПустомуПравильномуМакету + " не найден!");
		Возврат;
	КонецЕсли;	 
	
	
	МассивКонстантДляОбработки = ПолучитьМассивКонстантДляОбработки();
	
	ТаблицаСправочниковДляПолученияМакетовFixtures = Новый ТаблицаЗначений;
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Объект");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Тип");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Вид");
	
	ТаблицаКода = Новый ТаблицаЗначений;
	ТаблицаКода.Колонки.Добавить("СтрокаКода");
	
	
	//Сообщить("//код для вставки");
	ДобавитьСтрокуКода(ТаблицаКода,"Процедура ЗаполнениеКонстант() Экспорт",Ложь);
	Для каждого Элем Из МассивКонстантДляОбработки Цикл
		Имя         = Элем;
		
		Состояние("Константы." + Имя);
		
		Значение    = Константы[Имя].Получить();
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Сообщить("//Константа " + Имя + " была не заполнена.");
			ДобавитьСтрокуКода(ТаблицаКода,"//Константа " + Имя + " была не заполнена.");
			Продолжить;
		КонецЕсли;	 
		
		
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
			ЗначениеИзХранилища = Значение.Получить();
			Если ЗначениеИзХранилища = Неопределено Тогда
				Сообщить("//Константа " + Имя + " была не заполнена.");
				ДобавитьСтрокуКода(ТаблицаКода,"//Константа " + Имя + " была не заполнена.");
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	 
		
		ПолучитьСтрокуКодаДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"КонецПроцедуры",Ложь);
	
	
	ТаблицаСправочниковДляПолученияМакетовFixtures.Свернуть("Объект,Тип,Вид");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Сортировать("Вид,Объект");
	
	
	//ТаблицаСправочниковДляПолученияМакетовFixtures.ВыбратьСтроку();
	Сообщить("   ");
	
	
	
	
	//СтрСтрока = ТаблицаСправочниковДляПолученияМакетовFixtures.Добавить();
	//СтрСтрока.Объект = Справочники.Номенклатура.НайтиПоКоду("00000001350");
	//СтрСтрока.Тип    = "Справочник";
	//СтрСтрока.Вид    = "Номенклатура";
	
	
	МассивМакетовДляВставки = Новый Массив;
	
	
	
	//ДобавитьМассивмакетовОВОбработку(МассивМакетовДляВставки,ПутьКОбработке);
	
	
	
	//Сообщить("ПОТОМ ВЕРНУТЬ!!! ПолучитьFixturesДляСправочников()");
	ПолучитьFixturesДляСправочников(ТаблицаСправочниковДляПолученияМакетовFixtures,МассивМакетовДляВставки);
	
	
	
	ПутьКОбработке = ПутьКШаблонуОбработки;
	ДобавитьМассивМакетовВОбработкуИКод(МассивМакетовДляВставки,ПутьКОбработке,ТаблицаКода);
	
КонецПроцедуры


Функция ПолучитьТаблицуВидовСправочников(ТаблицаОбъектов)
	КопияТаблицы = ТаблицаОбъектов.Скопировать();
	
	КопияТаблицы.Свернуть("Вид");
	КопияТаблицы.Сортировать("Вид");
	
	Возврат КопияТаблицы;
КонецФункции	


Функция ПолучитьМакетДляВидаСправочника(Вид,ВсяТаблицаОбъектов,ИмяМакета)
	Отбор = Новый Структура();
	Отбор.Вставить("Вид",Вид);
	МассивСтрок = ВсяТаблицаОбъектов.НайтиСтроки(Отбор);
	
	СтруктураПараметров = Новый Структура;
	
	МассивОбъектов = Новый Массив;
	
	Для каждого СтрокаСОбъектов Из МассивСтрок Цикл
		//Сообщить("" + СтрокаСОбъектов.Объект + ", Вид="+СтрокаСОбъектов.Вид);
		
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("Объект",СтрокаСОбъектов.Объект);
		СтруктураОбъекта.Вставить("Вид",СтрокаСОбъектов.Вид);
		
		МассивОбъектов.Добавить(СтруктураОбъекта);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивОбъектов",МассивОбъектов);
	
	
	
	ГенераторFixtures = ВнешниеОбработки.Создать(ПутьКГенераторуFixtures);
	ФормаГенератора   = ГенераторFixtures.ПолучитьФорму("Форма");
	ФормаГенератора.Открыть();
	ГенераторFixtures.ВыгружатьКод = Истина;
	
	ДеревоМетаданных = ГенераторFixtures.ДеревоМетаданных;
	//ДеревоМетаданных.ВыбратьСтроку();
	
	ВеткаСправочников = ДеревоМетаданных.Строки[0].Строки[0];
	//Для каждого СтрокаДерева Из ВеткаСправочников.Строки Цикл
	//	Сообщить("" + СтрокаДерева.ПолноеИмяМетаданных);
	//КонецЦикла;
	НужнаяСтрокаДерева = ВеткаСправочников.Строки.Найти(Вид,"ПолноеИмяМетаданных");
	Если НужнаяСтрокаДерева = Неопределено Тогда
		Сообщить("Не найдена строка справочника в дереве. Вид="+вид);
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	НужнаяСтрокаДерева.Выгружать         = Истина;
	НужнаяСтрокаДерева.ИспользоватьОтбор = Истина;
	
	
	
	ФормаГенератора.ЭлементыФормы.ДеревоМетаданных.ТекущаяСтрока = НужнаяСтрокаДерева;
	//ФормаГенератора.ДеревоМетаданныхПриАктивизацииСтроки("");
	
	
	ЭлементОтбора                = ГенераторFixtures.КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СпсЗначений = Новый СписокЗначений;
	СпсЗначений.ЗагрузитьЗначения(ВсяТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	ЭлементОтбора.ПравоеЗначение = СпсЗначений;
	
	ЭлементОтбора.Использование = Истина;
	
	НужнаяСтрокаДерева.НастройкиКомпоновщика = ГенераторFixtures.КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	
	
	Макет = Новый ТабличныйДокумент;
	Макет.Прочитать(ПутьУПустомуПравильномуМакету);
	ГенераторFixtures.СоздатьМакетДанныхПоМетаданным(Макет);
	
	ИмяМакета = "Справочник." + Вид;
	Макет.Показать(ИмяМакета);
	
	ФормаГенератора.Закрыть();
	ГенераторFixtures = Неопределено;
	
	Возврат Макет;
	
КонецФункции	

Процедура ПолучитьFixturesДляСправочников(ТаблицаОбъектов,МассивМакетовДляВставки)
	
	ФайлГенератораfixtures = Новый Файл(ПутьКГенераторуFixtures);
	Если Не ФайлГенератораfixtures.Существует() Тогда
		Сообщить("Не найден файл генератора Fixtures.");
		Возврат;
	КонецЕсли;	 

	
	ТаблицаВидов = ПолучитьТаблицуВидовСправочников(ТаблицаОбъектов);
	
	Для каждого СтрТаблицаВидов Из ТаблицаВидов Цикл
		ОбработкаПрерыванияПользователя();
		
		Вид = СтрТаблицаВидов.Вид;
		
		ИмяМакета = "";
		Макет = ПолучитьМакетДляВидаСправочника(Вид,ТаблицаОбъектов,ИмяМакета);
		
		
		СтруктураМакета = Новый Структура;
		СтруктураМакета.Вставить("Макет",Макет);
		СтруктураМакета.Вставить("ИмяМакета",ИмяМакета);
		
		МассивМакетовДляВставки.Добавить(СтруктураМакета);
		
		Сообщить("ПОТОМ УБРАТь!!! ВЫГРУЖАЕТСЯ ТОЛЬКО ОДИН СПРАВОЧНИК!!!");
		Прервать;
	КонецЦикла;
КонецПроцедуры

Процедура СделатьСообщение(Стр);
	Сообщить(Стр);
КонецПроцедуры

Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
	//СистемнаяИнформация = Новый СистемнаяИнформация;
	//
	//Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
	//	Попытка
	//		ИмяВременногоBAT = ПолучитьИмяВременногоФайла("cmd");
	//		
	//		//ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT,"UTF-8",,Истина); 
	//		ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT,"UTF-8",,Истина); 
	//		ЗТ.ЗаписатьСтроку(Стр); 
	//		ЗТ.Закрыть();
	//		
	//		WshShell = Новый COMОбъект("WScript.Shell");
	//		//Сообщить(Стр);
	//		WshShell.Run(ИмяВременногоBAT,7,-1);	
	//		УдалитьФайлы(ИмяВременногоBAT);
	//	Исключение
	//		#Если Клиент Тогда
	//		КомандаСистемы(Стр);
	//		#КонецЕсли
	//	КонецПопытки;
	//Иначе
	//	ВызватьИсключение "Команда системы реализована только под Windows.";
	//КонецЕсли;	 
	
КонецПроцедуры


Функция РаспаковатьEPF(ИмяФайла,КаталогРаспаковки)
	ФайлПрекомит = Новый Файл(ПутьКPrecommit);
	Если НЕ ФайлПрекомит.Существует() Тогда
		Сообщить("Не найден каталог прекоммита!");
		Возврат Ложь;
	КонецЕсли;	 

	
	ГенерироватьУФ       = Ложь;
	КаталогИнструментов  = ПутьКPrecommit;
	ЭтоУФ                = Ложь;
	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
		//ИмяКаталогаДляИсходников = Файл.Путь + "Src";
		ИмяКаталогаДляИсходников = КаталогРаспаковки;
		
		Если ГенерироватьУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\Form\Форма\Форма.txt";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		КонецЕсли;	 
		
		
		
		//ИмяКаталогаДляИсходников = КаталогВременныхФайлов() + "\src";
		
		
		УдалитьФайлы(ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаРазборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py  """ +  ИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		СделатьСообщение("Делаю распаковку " + Файл.ПолноеИмя);
		СделатьСообщение("Строка распаковки: " + СтрокаРазборкиEpf);
		//КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		ВыполнитьКомандуОС(СтрокаРазборкиEpf);
		
		
		//Файл = Новый Файл(ПутьКФайлуМодуля);
		//Если Не Файл.Существует() Тогда
		//	СделатьСообщение("Не найден файл после распаковки: " + ПутьКФайлуМодуля);
		//	Если ЭтоУФ Тогда
		//		СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
		//	Иначе	
		//		СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
		//	КонецЕсли;	 
		//	Возврат Ложь;
		//КонецЕсли;	 
		
		
	Исключение
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура УбратьЗаменитьЗапрещенныеСимволыИзСтроки(Стр) 
	Стр = СтрЗаменить(Стр,".","_");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"-","_");
	Стр = СтрЗаменить(Стр,"+","");
	//Стр = СтрЗаменить(Стр,"<","");
	//Стр = СтрЗаменить(Стр,">","");
КонецПроцедуры


Процедура ЗаписатьМакетСПравильнымИменем(ИмяМакета,Макет,КаталогДляРаботы,ИДМакета)
		УбратьЗаменитьЗапрещенныеСимволыИзСтроки(ИмяМакета);
		
		УИД = Новый УникальныйИдентификатор;
		//Сообщить("ПРОИСХОДИТ ПОДМЕНА УИД!!! ПОТОМ УБРАТЬ!!!");
		//УИД = "7a3e66f5-c873-4e1b-9d97-2c5359d503a9";
		УИД = СокрЛП(УИД);
		
		ИДМакета = УИД;
		
		ИмяФайлаОписанияМакета = КаталогДляРаботы + "\" + УИД;
		
		ЗТ = Новый ЗаписьТекста(ИмяФайлаОписанияМакета,"UTF-8",,Истина); 
		ЗТ.ЗаписатьСтроку("{1,"); 
		ЗТ.ЗаписатьСтроку("{2,0,"); 
		ЗТ.ЗаписатьСтроку("{1,"); 
		ЗТ.ЗаписатьСтроку("{0,0," + УИД + "},""" + ИмяМакета + ""","); 
		ЗТ.ЗаписатьСтроку("{1,""ru"",""" + ИмяМакета + """},"""",0,0}"); 
		ЗТ.ЗаписатьСтроку("},0}"); 
		
		ЗТ.Закрыть();
		
		Сообщить("Записал описание макета " + ИмяФайлаОписанияМакета);
		
		
		ФайлТелоМакета = КаталогДляРаботы + "\" + УИД + ".0";
		//Макет = Новый ТабличныйДокумент;
		Макет.Записать(ФайлТелоМакета);
КонецПроцедуры

Функция ПолучитьИмяФайлаRoot(КаталогДляРаботы)
	
	СтрокаВозврата = Неопределено;
	
	ИмяФайла = КаталогДляРаботы + "\root";
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ИмяФайла + " не существует!");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = Сред(Стр,4);
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		//Сообщить(Стр);
		
		СтрокаВозврата = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	Возврат СтрокаВозврата;
КонецФункции	

Процедура ЗаписатьВФайлRootИДМакетов(ПутьКRoot,МассивМакетовДляВставки)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКRoot,"UTF-8");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Истина); 
	
	СтрокаДляИДМакетов = "{3daea016-69b7-4ed4-9453-127911372fe6,";
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,СтрокаДляИДМакетов) > 0 Тогда
			//это строка в которой лежат макеты
			СтрокаДляИДМакетов = СтрокаДляИДМакетов + СтрЗаменить(СокрЛП(МассивМакетовДляВставки.Количество()),Символы.НПП,"");
			Для каждого Элем Из МассивМакетовДляВставки Цикл
				ИдМакета = Элем.ИдМакета;
				СтрокаДляИДМакетов = СтрокаДляИДМакетов + "," + ИдМакета;
			КонецЦикла;
			СтрокаДляИДМакетов = СтрокаДляИДМакетов + "},";
			
			Стр                = СтрокаДляИДМакетов;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	//Сообщить("Записал " + ИмяВременногоФайла);
	
	КопироватьФайл(ИмяВременногоФайла,ПутьКRoot);
	
	
КонецПроцедуры

Процедура ДобавитьСтрокиВФайлRenames(ПтуьКRenames,МассивМакетовДляВставки)
	ЗТ = Новый ЗаписьТекста(ПтуьКRenames,"UTF-8",,Истина); 
	
	Для каждого Элем Из МассивМакетовДляВставки Цикл
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + "-->und\" + Элем.ИдМакета); 
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + ".0-->Макеты\" + Элем.ИмяМакета + ".mxl"); 
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + ".0-->und\" + Элем.ИдМакета + ".0"); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	
КонецПроцедуры

Процедура СкопироватьФайлыМакетовВСлужебныйКаталог(КудаСкопироватьМакеты,МассивМакетовДляВставки)
	ФайлПроверкаСуществования = Новый Файл(КудаСкопироватьМакеты);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		СоздатьКаталог(КудаСкопироватьМакеты);
	КонецЕсли;	 
	
	
	Для каждого Элем Из МассивМакетовДляВставки Цикл
		Макет = Элем.Макет;
		//Макет = Новый ТабличныйДокумент;
		Макет.Записать(КудаСкопироватьМакеты + "\" + Элем.ИмяМакета + ".mxl");
	КонецЦикла;
КонецПроцедуры


Процедура ДобавитьВМодульОбъектаОбработкиТаблицуКода(ПутькМодулюОбработки,ТаблицаКода)
	ФайлПроверкаСуществования = Новый Файл(ПутькМодулюОбработки);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ПутькМодулюОбработки + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	//скопируем то, что уже есть
	КопироватьФайл(ПутькМодулюОбработки,ИмяВременногоФайла);
	
	
	
	
	//ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Истина); 
	ЗТ = Новый ЗаписьТекста; 
	ЗТ.Открыть(ИмяВременногоФайла,"UTF-8",,Истина);
	Для каждого СтрТаблицаКода Из ТаблицаКода Цикл
		ЗТ.ЗаписатьСтроку(СтрТаблицаКода.СтрокаКода); 		
	КонецЦикла;
	ЗТ.Закрыть();
	
	
	КопироватьФайл(ИмяВременногоФайла,ПутькМодулюОбработки);
КонецПроцедуры

Процедура ДобавитьМассивМакетовВОбработкуИКод(МассивМакетовДляВставки,ПутьКОбработке,ТаблицаКода)
	ФайлОбработки  = Новый Файл(ПутьКОбработке);
	Если НЕ ФайлОбработки.Существует() Тогда
		Сообщить("Файл " + ПутьКОбработке + " не найден.");
		Возврат;
	КонецЕсли;	 
	
	
	
	КаталогРаспаковки = "C:\Temp\111";
	//КаталогДляРаботы    = ФайлОбработки.Путь + "Src\" + ФайлОбработки.ИмяБезРасширения + "\und";
	КаталогДляРаботы    = КаталогРаспаковки + "\" + ФайлОбработки.ИмяБезРасширения +  "\und";
	//ПутьКИсходникам     = ФайлОбработки.Путь + "Src\" + ФайлОбработки.ИмяБезРасширения;
	ПутьКИсходникам     = КаталогРаспаковки + "\" +  ФайлОбработки.ИмяБезРасширения;
	КаталогИнструментов = ПутьКPrecommit;
	
	ИмяВременнойEPF     = ПутьКГенерируемойEPF;
	УдалитьФайлы(ИмяВременнойEPF);
	
	
	
	
	//СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	//Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	//ВыполнитьКомандуОС(СтрокаСборкиEpf);
	//Сообщить("ПОТОМ ВЕРНУТЬ СОЗДАНИЕ EPF С МАКЕТАМИ!!!!!!!!!!!!!!!");
	//Возврат;
	
	
	Если НЕ РаспаковатьEPF(ПутьКОбработке,КаталогРаспаковки) Тогда
		Возврат;
	КонецЕсли;	 
	
	//Возврат;
	
	
	Для каждого Элем Из МассивМакетовДляВставки Цикл
		ИмяМакета = Элем.ИмяМакета;
		УбратьЗаменитьЗапрещенныеСимволыИзСтроки(ИмяМакета);
		Элем.ИмяМакета = ИмяМакета;
	КонецЦикла;
	
	
	//Возврат;
	//Сообщить("ПОТОМ ВЕРНУТЬ РАСПАКОВКУ!!!!!!!!!!!!!!!");
	
	
	
	
	//СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	//Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	//ВыполнитьКомандуОС(СтрокаСборкиEpf);
	//Сообщить("ПОТОМ ВЕРНУТЬ СОЗДАНИЕ EPF С МАКТАМИ!!!!!!!!!!!!!!!");
	//Возврат;
	
	
	Для каждого Элем Из МассивМакетовДляВставки Цикл
		ИмяМакета = Элем.ИмяМакета;
		Макет     = Элем.Макет;
		ИДМакета  = "";
		ЗаписатьМакетСПравильнымИменем(ИмяМакета,Макет,КаталогДляРаботы,ИДМакета);
		Элем.Вставить("ИДМакета",ИДМакета);
	КонецЦикла;
	
	ИмяФайлаRoot = ПолучитьИмяФайлаRoot(КаталогДляРаботы);
	Если ИмяФайлаRoot = Неопределено Тогда
		Сообщить("Не смог прочитать файл root.");
		Возврат;
	КонецЕсли;	
	
	ПутьКRoot = КаталогДляРаботы + "\" + ИмяФайлаRoot;
	ЗаписатьВФайлRootИДМакетов(ПутьКRoot,МассивМакетовДляВставки);
	
	ПтуьКRenames = ПутьКИсходникам + "\renames.txt";
	ДобавитьСтрокиВФайлRenames(ПтуьКRenames,МассивМакетовДляВставки);
	
	КудаСкопироватьМакеты = ПутьКИсходникам + "\Макеты";
	СкопироватьФайлыМакетовВСлужебныйКаталог(КудаСкопироватьМакеты,МассивМакетовДляВставки);
	
	
	
	Если ТаблицаКода <> Неопределено Тогда
		ПутькМодулюОбработки = ПутьКИсходникам + "\ObjectModule.txt";
		ДобавитьВМодульОбъектаОбработкиТаблицуКода(ПутькМодулюОбработки,ТаблицаКода);
	КонецЕсли;	 
	
	
	
	
	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	
	ВыполнитьКомандуОС(СтрокаСборкиEpf);
	
КонецПроцедуры


Процедура ОсновныеДействияФормыТестРаспаковки(Кнопка)
	МассивМакетовДляВставки = Новый Массив;
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать("C:\Temp\Справочник.ШаблонПисем.mxl");
	
	СтруктураМакета = Новый Структура;
	СтруктураМакета.Вставить("Макет",ТД);
	СтруктураМакета.Вставить("ИмяМакета","Справочник.ШаблонПисем");
	
	МассивМакетовДляВставки.Добавить(СтруктураМакета);
	
	ПутьКОбработке = "C:\Commons\Rep\vanessa-BaseInit\ШаблонОбработкиДляНачальногоЗаполнения.epf";
	
	ДобавитьМассивМакетовВОбработкуИКод(МассивМакетовДляВставки,ПутьКОбработке,Неопределено);
	
КонецПроцедуры


Процедура ПриОткрытии()
	Если ПутьКГенераторуFixtures = "" Тогда
		ПутьКГенераторуFixtures = "C:\Commons\Rep\xUnitFor1C\xddDataFixtureGen.epf";
	КонецЕсли;	 
	Если ПутьКPrecommit = "" Тогда
		ПутьКPrecommit = "C:\Commons\Rep\vanessa-base-init\.git\hooks";
	КонецЕсли;	 
	Если ПутьУПустомуПравильномуМакету = "" Тогда
		ПутьУПустомуПравильномуМакету = "C:\Commons\Rep\vanessa-base-init\ПустойПравильныйМакет.mxl";
	КонецЕсли;	 
	Если ПутьКШаблонуОбработки = "" Тогда
		ПутьКШаблонуОбработки = "C:\Commons\Rep\vanessa-base-init\ШаблонОбработкиДляНачальногоЗаполнения.epf";
	КонецЕсли;	 
	Если ПутьКГенерируемойEPF = "" Тогда
		ПутьКГенерируемойEPF = "C:\Temp\111.epf";
	КонецЕсли;	 
КонецПроцедуры

//Сообщить("111  " + Метаданные.ОсновнойЯзык);
//Макет = Новый ТабличныйДокумент;
//Макет.Прочитать("c:\users\pautov\desktop\444.mxl");
//Макет.Показать();
//ыа = 1;
//Макет.КодЯзыкаМакета = Метаданные.ОсновнойЯзык.КодЯзыка;
//Макет.Показать();
//Макет.Записать("c:\users\pautov\desktop\333.mxl");
//ыва = 1;

//Метаданные.ОсновнойЯзык.КодЯзыка






